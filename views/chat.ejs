<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real time chat app</title>
    <link rel="stylesheet" href="/styles/output.css">
    <link rel="stylesheet" href="/styles/chatbox.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>
<body class="bg-white text-black w-full">
    <div class="background-container">
        <img src="/images/chat.jpg" alt="banner">
        <div class="overlay"></div>
    </div>    
    <div class="fixed top-0 md:top-[10vh] md:left-[25vw] left-[2vw] backdrop-blur-sm bg-white bg-opacity-45 shadow-md md:max-h-[80vh] max-h-[90vh] md:w-[50vw] w-[96vw] rounded-lg overflow-hidden z-20 border border-gray-200 shadow-zinc-700">
        <div class="flex justify-between bg-red-500 shadow-md shadow-zinc-800 text-black items-center py-3 px-4 text-xl font-semibold">
            <div class="flex gap-2 items-center">
                <i class='bx bxs-chat text-2xl text-white'></i>
                <h3 id="roomVal" class="text-white font-semibold"></h3>
            </div>
            <div class="self-center relative">
                <button class=" text-white text-base font-semibold" id="userCount">Online: 0</button>
                <ul id="activeUserList" class="absolute hidden md:left-[-2.5vw] top-[45px] left-[-4.5vw]  bg-white bg-opacity-95 z-10  py-0 text-lg font-semibold text-zinc-700 shadow-sm shadow-zinc-500 flex-col items-center justify-center rounded-b-md ">
                </ul>
            </div>
            
                <!-- Active users will be dynamically added here -->
            <a href="/logout">
                <button id="logoutBtn"><i class='bx bx-log-out text-3xl bg-red-500 p-1 text-white font-semibold rounded-md border border-white'></i></button>
            </a>
        </div>
        <ul id="messageBox" class="p-4 overflow-y-auto space-y-2">
            <% if (response[1].length === 0) { %>
                <li class="text-center text-gray-900"></li>
            <% } else { %>
                <% response[1].forEach(message => { %>
                    <li class="message <%= message.sender === response[0] ? 'sent' : '' %>">
                        <h3 class="message-header"><%= message.sender %></h3>
                        <p class="message-body text-base"><%= message.data %></p>
                        <p class="text-xs flex w-full justify-end"><%= message.sentAt %></p>
                    </li>
                <% }) %>
            <% } %>
        </ul>
        <div id="typingIndicator" class="hidden text-gray-500 text-sm px-4 py-2"></div>
        <form class="p-2 flex items-center">
            <input type="text" placeholder="Enter your message" class="flex-1 p-2 border bg-white border-gray-500 rounded-lg focus:outline-none focus:border-red-500 transition duration-300 ease-in-out">
            <button type="submit" class="">
                <i class='bx bxs-send ml-3 p-2 shadow-lg shadow-zinc-700 text-3xl bg-red-500 text-white rounded-full hover:bg-red-600 transition duration-300 ease-in-out'></i>
            </button>
        </form>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userId = "<%= response[0] %>";
        let roomName = localStorage.getItem('roomName') || "<%= response[2] %>";
        const roomVal = document.getElementById('roomVal').innerHTML = roomName;
        localStorage.setItem('roomName', roomName);

        const userCountElement = document.getElementById('userCount');
        const activeUserList = document.getElementById('activeUserList');
    
        const socket = io();
    
        socket.emit('user connected', { userId, roomName });
    
        const form = document.querySelector('form');
        const input = document.querySelector('input');
        const msgBox = document.getElementById('messageBox');
        const typingIndicator = document.getElementById('typingIndicator');
        let typingTimeout;
    
        socket.on('chat message', (msg) => {
            const item = document.createElement('li');
            item.classList.add('message');
            if (msg.from === userId) {
                item.classList.add('sent');
            }
            item.innerHTML = `
                <h3 class="message-header">${msg.from}</h3>
                <p class="message-body">${msg.message}</p>
                <p class="text-xs flex w-full justify-end">${msg.sentAt}</p>
            `;
            msgBox.appendChild(item);
            msgBox.scrollTop = msgBox.scrollHeight;
        });
    
        socket.on('user join', (response) => {
            const item = document.createElement('li');
            item.classList.add('connect');
            item.innerHTML = `<p>${response.message}</p>`;
            msgBox.appendChild(item);
            msgBox.scrollTop = msgBox.scrollHeight;
        });
    
        socket.on('user left', (response) => {
            const item = document.createElement('li');
            item.classList.add('disconnect');
            item.innerHTML = `<p>${response.message}</p>`;
            msgBox.appendChild(item);
            msgBox.scrollTop = msgBox.scrollHeight;
        });

        socket.on('update user count', ({ userCount }) => {
            userCountElement.textContent = `Online: ${userCount}`;
        });

        socket.on('update active users', ({ users }) => {
            activeUserList.innerHTML = '';
            users.forEach(user => {
                const item = document.createElement('li');
                item.classList.add('shadow-inner', 'shadow-zinc-300', 'w-full', 'px-10', 'text-center');
                item.textContent = user;
                activeUserList.appendChild(item);
            });
        });
    
        socket.on('typing', (userId) => {
            typingIndicator.textContent = `${userId} is typing...`;
            typingIndicator.classList.remove('hidden');
        });
    
        socket.on('stop typing', () => {
            typingIndicator.classList.add('hidden');
        });
    
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (input.value) {
                const messageBody = {
                    message: input.value,
                    userId: userId,
                };
                socket.emit('chat message', messageBody);
                socket.emit('stop typing', userId);
                input.value = '';
            }
        });
    
        input.addEventListener('input', () => {
            socket.emit('typing', userId);
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stop typing', userId);
            }, 3000);
        });

        document.getElementById('logoutBtn').addEventListener('click', () => localStorage.removeItem('roomName'))

        userCountElement.addEventListener('click', () => {
            if(activeUserList.classList.contains('flex')){
                activeUserList.classList.remove('flex')
                activeUserList.classList.add('hidden')
            }
            else{
                activeUserList.classList.remove('hidden')
                activeUserList.classList.add('flex')
            }
        });

    </script>
</body>
</html>
